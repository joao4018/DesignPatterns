Intenção
dinamicamente, agregar resposabilidades adicionais a um objeto. Os Decorators fornecem uma alternativa flexível ao uso de subclasses para extensão de funcionalidades.
Uso:
1. para acresecentar resposabilidades a objetos idicivuias de forma dinamica e trasparente, ou seja, sem afetar outros objetos;
2. para responsabildades que podem ser removidas.
3. quando a extensao atraves do uso de subclasses não é pratica.As vezes, um grande numero de extensoes independentes é possível e isso poderia produzir uma explosão de subclasses para suportar cada combinação.Ou a definição de uma classe pode estar oculta ou não estar disponível para a utilização de subclasses.
Participantes.
Componente- define a interface para objetos que podem ter responsabilidades acresentadas aos mesmos dinamicamente.
ConcreteComponent- define um objeto para o qual as resposabildiades adcionais podem ser atribuidas.
Decorator- Mantém uma referencia para um objeto Component e define uma interface que segue a interface de Component.
ConcreteDecorator- acrescenta resposabilidades ao component.

